
R version 4.2.2 (2022-10-31) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ### R code from vignette source 'results1.Rnw'
> 
> ###################################################
> ### code chunk number 1: setparent
> ###################################################
> #knitr::set_parent('Replication_aejae.Rnw')
> #load("../data/interwrk/my_work_space.RData")
> source(file.path(rprojroot::find_rstudio_root_file(),"pathconfig.R"),echo=FALSE)
> source(file.path(basepath,"global-libraries.R"),echo=FALSE)
Loading required package: dplyr

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: devtools
Loading required package: usethis
Loading required package: rprojroot
Loading required package: tictoc
Loading required package: ggplot2
Loading required package: bindrcpp
Loading required package: Rcpp
Loading required package: markdown
> source(file.path(programs,"libraries.R"), echo=FALSE)
Loading required package: rcrossref
Loading required package: readr
Loading required package: tidyr
Loading required package: data.table

Attaching package: ‘data.table’

The following object is masked from ‘package:tictoc’:

    shift

The following objects are masked from ‘package:dplyr’:

    between, first, last

Loading required package: xtable
Loading required package: rjson
Loading required package: stargazer

Please cite as: 

 Hlavac, Marek (2022). stargazer: Well-Formatted Regression and Summary Statistics Tables.
 R package version 5.2.3. https://CRAN.R-project.org/package=stargazer 

Loading required package: knitr
Loading required package: stringr
Loading required package: readxl
Loading required package: fastDummies
Loading required package: skimr
Loading required package: sandwich
Loading required package: pastecs

Attaching package: ‘pastecs’

The following objects are masked from ‘package:data.table’:

    first, last

The following object is masked from ‘package:tidyr’:

    extract

The following objects are masked from ‘package:dplyr’:

    first, last

Loading required package: formattable

Attaching package: ‘formattable’

The following object is masked from ‘package:xtable’:

    digits

Loading required package: reshape2

Attaching package: ‘reshape2’

The following objects are masked from ‘package:data.table’:

    dcast, melt

The following object is masked from ‘package:tidyr’:

    smiths

Skipping install of 'openalexR' from a github remote, the SHA1 (558581c6) has not changed since last install.
  Use `force = TRUE` to force installation
> #source(file.path(TexBase,"libraries.R"), echo=FALSE)
> source(file.path(programs,"config.R"), echo=FALSE)
> 
> # Read analysis data
> source(file.path(programs,"_read_analysis_data.R"),echo=TRUE)

> repllist4 <- readRDS(file = file.path(interwrk, "replication_list_clean.Rds"))

> d <- repllist4 %>% mutate(replicated_clean = replicated1_clean)

> exit <- readRDS(file = file.path(dataloc, "exitQ_pub.Rds"))

> entry <- readRDS(file = file.path(dataloc, "entryQ_pub.Rds"))

> bibinfo.df <- readRDS(file = file.path(crossrefloc, 
+     "crossref_info.Rds")) %>% select(DOI, year, journal)

> bibinfo.df$journal <- gsub("American Economic Journal: Applied Economics", 
+     "AEJ:AE", bibinfo.df$journal)

> bibinfo.df$journal <- gsub("American Economic Journal: Macroeconomics", 
+     "AEJ:Mac", bibinfo.df$journal)

> bibinfo.df$journal <- gsub("American Economic Journal: Microeconomics", 
+     "AEJ:Mic", bibinfo.df$journal)

> bibinfo.df$journal <- gsub("American Economic Review", 
+     "AER", bibinfo.df$journal)

> d <- d %>% filter(journal == "American Economic Journal: Applied Economics")

> exit <- exit %>% left_join(bibinfo.df, by = "DOI") %>% 
+     filter(journal == "AEJ:AE")

> entry <- entry %>% left_join(bibinfo.df, by = "DOI") %>% 
+     filter(journal == "AEJ:AE")

> data_assessment4 <- unique(d$DOI)

> data_assessment5 <- unique(exit$DOI)
> 
> # Remove NA entries for DOIs
> d_entry <- entry %>% filter(!is.na(DOI))
> uniquedoi <- length(unique(d_entry$DOI))
> # TODO: this needs to provide a bit of an assessment how reliable assessor are
> 
> # this unique doi will be used in a later code
> saveRDS(uniquedoi,file=file.path(dataloc,"00_uniquedoi.Rds"))
> 
> 
> ###################################################
> ### code chunk number 2: entry_merge
> ###################################################
> 
> 
> # Remove duplicates while combining information. Define data absence variable.
> # QUESTION: if there is conflicting information, which one takes precedence? The first one. So it only grabs the second if there is an NA in the first
> # Note: this create a function taking a data frame as input, it does not create df so far
> coalesce_by_column <- function(df) { return(coalesce(df[1], df[2]))}
> entry_merge <- d_entry %>% group_by(DOI) %>% summarise_all(coalesce_by_column) %>%
+   rename(difficult=`How difficult do you think replicating the article will be`) %>%
+   mutate(absence = ifelse(is.na(DataAbsence),"Data was Provided","No Data or Reason"),
+          absence = ifelse(grepl("confidential",tolower(DataAbsence)) |
+                           grepl("proprietary",tolower(DataAbsence)) |
+                           grepl("need to retrieve",tolower(DataAbsence)) |
+                           grepl("purchased",tolower(DataAbsence)) |
+                           grepl("payment",tolower(DataAbsence)) |
+                           grepl("restriction",tolower(DataAbsence)) |
+                           grepl("register",tolower(DataAbsence)) |
+                           grepl("redistribution not authorized",tolower(DataAbsence)) |
+                           grepl("download site",tolower(DataAbsence)) |
+                           grepl("licensed",tolower(DataAbsence)),"Confidential Data",absence),
+          absence = ifelse(grepl("theoretical",tolower(DataAbsence)) |
+                           grepl("parameters",tolower(DataAbsence)) |
+                           grepl("generate the necessary",tolower(DataAbsence)) |
+                           grepl("analytical",tolower(DataAbsence)),"Simulations Only",absence)
+          )
> 
> # #### Eligible articles are those that are empirical but for the stats we need also the confidential and no data/reason
> # all complete records
> eligible <- entry_merge %>% filter(TypeOfArticle == "Yes")
> sample_confdata <- eligible %>% filter(absence == "Confidential Data")
> sample_nodata <- eligible %>% filter(absence == "No Data or Reason")
> 
> #### Now
> # Get eligible DOIs from Entry Q with provided data: eligible DOIs are taken from entry,  limited to AEJ:AE (out of 394 plausible,
> # 342 done)
> eligible_DOIs <- unique(eligible$DOI[eligible$absence == "Data was Provided"])
> 
> # Limit to Exit Q to the eligible articles
> exit_d <- exit %>% filter(DOI %in% eligible_DOIs)
> 
> # Inspect replicated options
> #unique(exit$Replication_Success)
> 
> # Find DOIs which had at least two types of replication outcome
> temp <- exit_d %>%
+   mutate(dup = paste(DOI,Replication_Success)) %>%
+   distinct(dup, .keep_all = TRUE) %>%
+   group_by(DOI) %>%
+   mutate(id=1:n()) %>%
+   filter(id==2) %>%
+   select(DOI)
> 
> temp_num<-length(temp$DOI)
> cat(temp_num, 						file=file.path(TexIncludes,"temp_num.tex"))
> 
> dup_num<-sum(duplicated(exit_d$DOI))
> temp_num<-length(temp$DOI)
> cat(dup_num, 						file=file.path(TexIncludes,"dup_num.tex"))
> 
> # Remove duplicates, making sure to keep duplicates that are more successful
> # Also categorize documentation clarity, according to these categories:
> cat1 <- c("no readme file was provided.")
> cat2 <- c("complete. provided all information required to run the programs.")
> cat3 <- c("incomplete. was ambiguous or left out crucial steps.")
> exit_d <- exit_d %>%
+   mutate(X18 = if_else(DOI=="10.1257/app.3.2.1","No Info", X18))  %>%
+   mutate(X18 = if_else(DOI=="10.1257/app.20160089","Complete. Provided all information required to run the programs.",X18))
Error in `mutate()`:
ℹ In argument: `X18 = if_else(DOI == "10.1257/app.3.2.1", "No Info", X18)`.
Caused by error in `if_else()`:
! object 'X18' not found
Backtrace:
     ▆
  1. ├─... %>% ...
  2. ├─dplyr::mutate(...)
  3. ├─dplyr::mutate(...)
  4. ├─dplyr:::mutate.data.frame(., X18 = if_else(DOI == "10.1257/app.3.2.1", "No Info", X18))
  5. │ └─dplyr:::mutate_cols(.data, dplyr_quosures(...), by)
  6. │   ├─base::withCallingHandlers(...)
  7. │   └─dplyr:::mutate_col(dots[[i]], data, mask, new_columns)
  8. │     └─mask$eval_all_mutate(quo)
  9. │       └─dplyr (local) eval()
 10. ├─dplyr::if_else(DOI == "10.1257/app.3.2.1", "No Info", X18)
 11. └─base::.handleSimpleError(...)
 12.   └─dplyr (local) h(simpleError(msg, call))
 13.     └─rlang::abort(message, class = error_class, parent = parent, call = error_call)
Execution halted
